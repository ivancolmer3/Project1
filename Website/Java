JavaScript

parentheses= ; if something says inside the parentheses use semi colon

Console=control panel

console.log(30);

saving my age, always remember to end with a semi colon ;

this is used for printing dataA single line comment will comment out a single line and is denoted with two forward slashes // preceding it.

console.log(5);  // Prints 5

ulti-line comment will comment out multiple lines and is denoted with /* to begin the comment, and */ to end the comment.

/*
This is all commented 
console.log(10);
None of this is going to run!
console.log(99);
*/

You can also use this syntax to comment something out in the middle of a line of code:

console.log(/*IGNORED!*/ 5);  // Still just prints 5

eg //opening line

Number: Any number, including numbers with decimals: 4, 8, 1516, 23.42.

String: Any grouping of characters on your keyboard (letters, numbers, spaces, symbols, etc.) surrounded by single quotes: ' ... ' or double quotes " ... ". Though we prefer single quotes. Some people like to think of string as a fancy word for text.

Boolean: This data type only has two possible values— either true or false (without quotes). It’s helpful to think of booleans as on and off switches or as the answers to a "yes" or "no" question.

Null: This data type represents the intentional absence of a value, and is represented by the keyword null (without quotes).

Undefined: This data type is denoted by the keyword undefined (without quotes). It also represents the absence of a value though it has a different use than null.

Symbol: A newer feature to the language, symbols are unique identifiers, useful in more complex coding. No need to worry about these for now.

Add: +                   
Subtract: -
Multiply: *
Divide: /
Remainder: %
console.log(3 + 4); // Prints 7
console.log(5 - 1); // Prints 4
console.log(4 * 2); // Prints 8
console.log(9 / 3); // Prints 3

The remainder operator, sometimes called modulo, returns the number that remains after the right-hand number divides into the left-hand number as many times as it evenly can: 11 % 3 equals 2 because 3 fits into 11 three times, leaving 2 as the remainder.

Object: Collections of related data.

console.log('Hello ' + 'World')// Prints the space is between the 'o' at the end of hello and single quotation

When you introduce a new piece of data into a JavaScript program, the browser saves it as an instance of the data type. Every string instance has a property called length that stores the number of characters in that string. You can retrieve property information by appending the string with a period and the property name:

console.log('Hello'.length); // Prints 5 
the length being 5 character long

console.log('hello'.toUpperCase()); // Prints 'HELLO'
console.log('Hey'.startsWith('H')); // Prints true
Let's look at each of the lines above:

On the first line, the .toUpperCase() method is called on the string instance 'hello'. The result is logged to the console. This method returns a string in all capital letters: 'HELLO'.

On the second line, the .startsWith() method is called on the string instance 'Hey'. This method also accepts the character 'H' as an input, or argument, between the parentheses. Since the string 'Hey' does start with the letter 'H', the method returns the boolean true.
You can find a list of built-in string methods in the JavaScript documentation. Developers use documentation as a reference tool. It describes JavaScript's keywords, methods, and syntax.

// Use .toUpperCase() to log 'Codecademy' in all uppercase letters

console.log('Codecademy'.toUpperCase()); // Prints


// Use a string method to log the following string without whitespace at the beginning and end of it.

console.log('    Remove whitespace   '.trim()); // Prints

Built in objects-Math 

console.log(Math.random()); // Prints a random number between 0 and 1

Math.random() * 50;
console.log(Math.floor(Math.random() * 100));
console.log(Math.ceil(43.8));
console.log(Number.isInteger(2017));
Math.floor(Math.random() * 50);

Variables

var myName = 'Arya';
console.log(myName);
// Output: Arya

var favoriteFood='pizza';
console.log(favoriteFood);
// Output:

var numOfSlices=8
console.log(numOfSlices)
// Output:

let

let meal = 'Enchiladas';
console.log(meal); // Output: Enchiladas
meal = 'Burrito';
console.log(meal); // Output: Burrito

let price;
console.log(price); // Output: undefined
price = 350;
console.log(price); // Output: 350

let changeMe = true;

changeMe = false;

console.log(changeMe);

const

const myName = 'Gilberto';
console.log(myName); // Output: Gilberto
However, a const variable cannot be reassigned because it is constant. If you try to reassign a const variable, you'll get a TypeError.

const entree = 'Enchiladas';

console.log(entree);

const testing;

Math variables

let w = 4;
w = w + 1;

console.log(w); // Output: 5
mathematical assignment operators
let w = 4;
w += 1;

console.log(w); // Output: 5
let x = 20;
x -= 5; // Can be written as x = x - 5
console.log(x); // Output: 15

let y = 50;
y *= 2; // Can be written as y = y * 2
console.log(y); // Output: 100

let z = 8;
z /= 2; // Can be written as z = z / 2
console.log(z); // Output: 4


The Increment and Decrement Operator
The increment operator will increase the value of the variable by 1. The decrement operator will decrease the value of the variable by 1. For example:

let a = 10;
a++;
console.log(a); // Output: 11
let b = 20;
b--;
console.log(b); // Output: 19
 (+=, -=, *=, /=)

String Concatenation with Variables

The + operator can be used to combine two string values even if those values are being stored in variables:

let myPet = 'armadillo';
console.log('I own a pet ' + myPet + '.'); 
// Output: 'I own a pet armadillo.'

In the example above, we assigned the value 'armadillo' to the myPet variable. On the second line, the + operator is used to combine three strings: 'I own a pet', the value saved to myPet, and '.'. We log the result of this concatenation to the console as:

I own a pet armadillo.

My work
let favoriteAnimal = 'dog';
console.log('My favorite animal is a ' + favoriteAnimal + '.');

String Interpolation
In the ES6 version of JavaScript, we can insert, or interpolate, variables into strings using template literals. Check out the following example where a template literal is used to log strings together:

const myPet = 'armadillo';
console.log(`I own a pet ${myPet}.`);
// Output: I own a pet armadillo.

My work
const myName = 'Ivan';
console.log(`My name is ${myName}.`);
const myCity = 'London';
console.log(`My faovrite city is ${myCity}.`);
console.log(`My name is ${myName}. My favorite city is ${myCity}.`);

typeof operator
While writing code, it can be useful to keep track of the data types of the variables in your program. If you need to check the data type of a variable's value, you can use the typeof operator.

The typeofoperator checks the value to its right and returns, or passes back, a string of the data type.

const unknown1 = 'foo';
console.log(typeof unknown1); // Output: string

const unknown2 = 10;
console.log(typeof unknown2); // Output: number

const unknown3 = true; 
console.log(typeof unknown3); // Output: boolean

let newVariable = 'Playing around with typeof.';

console.log(typeof newVariable);

newVariable = 1;

console.log(typeof newVariable);



const test1 = 'figuring out quirks';

console.log(typeof test1); // Output = string



